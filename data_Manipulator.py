import pandas as pd
import numpy as np
from sklearn.utils import shuffle
from data_handler import GEODataManager
from sklearn.utils import resample


class DataAugmentation:
    def __init__(self, dataframe):
        self.dataframe = dataframe

    def bootstrap_sample(self, n_samples=100):
        """
        Generate bootstrap samples of the dataset.
        :param n_samples: Number of bootstrap samples to generate.
        :return: A list of DataFrames, each a bootstrap sample of the original dataset.
        """
        bootstrap_samples = [resample(self.dataframe, replace=True, n_samples=len(self.dataframe), random_state=i)
                             for i in range(n_samples)]
        return bootstrap_samples
    
    def shuffle_rows(self, reset_index=True):
        """Shuffle the rows of the DataFrame."""
        shuffled_df = shuffle(self.dataframe)
        if reset_index:
            shuffled_df.reset_index(drop=True, inplace=True)
        return shuffled_df

    def add_random_noise(self, column, noise_level=0.01):
        """Add random Gaussian noise to a numeric column."""
        noise = np.random.normal(loc=0, scale=noise_level, size=self.dataframe[column].shape)
        self.dataframe[column] += noise
        return self.dataframe

    def randomize_column(self, column):
        """Randomly shuffle a single column, leaving the rest of the DataFrame intact."""
        randomized_col = shuffle(self.dataframe[column].values)
        self.dataframe[column] = randomized_col
        return self.dataframe

    def swap_columns(self, col1, col2):
        """Swap two columns in the DataFrame."""
        self.dataframe[col1], self.dataframe[col2] = self.dataframe[col2], self.dataframe[col1]
        return self.dataframe

    def add_synthetic_feature(self, function, new_column_name, *args):
        """Add a new column with synthetic data generated by a specified function."""
        self.dataframe[new_column_name] = self.dataframe.apply(lambda row: function(row, *args), axis=1)
        return self.dataframe


# Example usage
if __name__ == "__main__":
    filename = "final_data.csv"
    df = GEODataManager.load_csv(filename)
    augmenter = DataAugmentation(df)
    df_shuffled = augmenter.shuffle_rows()
    df_noised = augmenter.add_random_noise('A', noise_level=0.05)
    df_randomized_col = augmenter.randomize_column('B')
    df_swapped = augmenter.swap_columns('A', 'B')
    df_synthetic = augmenter.add_synthetic_feature(lambda row, scale: row['A'] * scale + row['B'], 'D', scale=2)

    print(df.head())
